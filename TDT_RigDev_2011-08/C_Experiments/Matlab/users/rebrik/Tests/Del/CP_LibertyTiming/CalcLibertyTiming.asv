load LibertyTimingTest_01.mat;

% vars
% TrackerTime
% TrackerXYZ
% nExtTS
% dExtTS

dXY = TrackerXYZ(1:2,:);
figure;
plot(dXY(1,:), dXY(2,:));

% convert to seconds
dTS = TrackerTime/1000;
dExtOffTS = dExtOffTS/1000;

dXY_Off_1 = zeros(2,nExtOff);
dXY_Off_2 = zeros(2,nExtOff);

for i = 1:nExtOff
 dTS_Idx = find( dTS > dExtOffTS(i));
 Idx = dTS_Idx(1);
 dXY_Off_1(:,i) = dXY(:,Idx-1);
 dXY_Off_2(:,i) = dXY(:,Idx);
 dTS_Off_1(i) = dTS(Idx-1);
 dTS_Off_2(i) = dTS(Idx); 
end

figure;
plot(dXY_Off_1(1,:), dXY_Off_1(2,:), 'g.');
hold on;
plot(dXY_Off_2(1,:), dXY_Off_2(2,:), 'r.');
axis equal;

dVx = (dXY_Off_2(1,:) - dXY_Off_1(1,:))./(dTS_Off_2 - dTS_Off_1);

% figure;
% hist(dTS_Off_2 - dTS_Off_1);
% hist(dXY_Off_2(1,:) - dXY_Off_1(1,:), 50);


PlusVx_idx = find(dVx > 0);
dXp_1 = dXY_Off_1(1,PlusVx_idx);
dXp_2 = dXY_Off_2(1,PlusVx_idx);
dTSp_diff = dTS_Off_2(PlusVx_idx) - dTS_Off_1(PlusVx_idx);
dVxp = (dXp_2 - dXp_1)./dTSp_diff;
Cp = polyfit(dVxp, dXp_2, 1);


figure;
hold on;
plot( dVxp, dXp_2, 'r.');
plot( dVxp, dXp_1, 'g.');
XX = xlim();
YY = polyval(Cp, XX);
plot( XX, YY, 'k-');

dDelayMs = -Cp(1)*1000;
fprintf('Calculated measurement delay for positive velocity, ms: %g\n', dDelayMs);


MinusVx_idx = find(dVx < 0);
dXm_1 = dXY_Off_1(1,MinusVx_idx);
dXm_2 = dXY_Off_2(1,MinusVx_idx);
dTSm_diff = dTS_Off_2(MinusVx_idx) - dTS_Off_1(MinusVx_idx);
dVxm = (dXm_2 - dXm_1)./dTSm_diff;
Cm = polyfit(dVxm, dXm_2, 1);


figure;
hold on;
plot( dVxm, dXm_2, 'r.');
plot( dVxm, dXm_1, 'g.');
XX = xlim();
YY = polyval(Cm, XX);
plot( XX, YY, 'k-');

dDelayMs = -Cm(1)*1000;
fprintf('Calculated measurement delay for negative velocity, ms: %g\n', dDelayMs);

