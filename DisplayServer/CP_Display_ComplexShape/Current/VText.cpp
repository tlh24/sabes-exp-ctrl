#include "ATL_Defs.h"            // ATL,COM and Windows definitions
#include "resource.h"            // Resource IDs for registry
#include "CP_Display.h"          // this file is generated by MIDL compiler
#include "VText.h"               // Uses ATL and IDs

#include <math.h>                // fabs() floor()
#include <gl\gl.h>               // Header File For The OpenGL32 Library
#include <gl\glu.h>              // Header File For The GLu32 Library

#include "GL_Engine.h"
#include "Util\CP_printf.h"


//==============================================================================
CVText::CVText() {

  m_bscText = "Hello world!";

 m_tGL_Font.CalcFontOutlines(g_hDC, m_iIsFilled );
}

//==============================================================================
CVText::~CVText(){

}


#define VOBJECT CVText  // this define is needed for <VObjectMethodsImpl.h>
#include "VObjectMethodsImpl.h"

////////////////////////////////////////////////////////////////////////////////
//                   text-specific methods

//==============================================================================
// we need to override this method to include outline calculation
HRESULT CVText::vSetFillFlag( long iFillFlag, long iLogID ){
  m_iIsFilled = iFillFlag;
  m_tGL_Font.CalcFontOutlines(g_hDC, m_iIsFilled );
  m_RequestUpdate(iLogID);
  return S_OK;
}


//==============================================================================
STDMETHODIMP CVText::GetText(BSTR * pbstText){
  
  * pbstText = m_bscText.copy();
  return S_OK;
}

//==============================================================================
STDMETHODIMP CVText::SetText(BSTR bstText, long iLogID ){

  m_bscText = bstText;
  m_RequestUpdate(iLogID);
  return S_OK;
}

//==============================================================================
STDMETHODIMP CVText::GetFontName(BSTR * pbstFont ){


  _bstr_t bscTmp(m_tGL_Font.c_tLogFont.lfFaceName );
  *pbstFont =  bscTmp.copy();

  return S_OK;
}

//==============================================================================
STDMETHODIMP CVText::SetFontName(BSTR bstFont, long iLogID ){

  _bstr_t bscTmp(bstFont);
  strncpy(m_tGL_Font.c_tLogFont.lfFaceName,  (char *)bscTmp, LF_FACESIZE);
  m_tGL_Font.c_tLogFont.lfFaceName[LF_FACESIZE-1] = 0; // zero-term 

  m_tGL_Font.CalcFontOutlines(g_hDC, m_iIsFilled );
  m_RequestUpdate(iLogID);
  return S_OK;
}

//==============================================================================
STDMETHODIMP CVText::GetFontWeight(long  * piWeight){

  * piWeight = m_tGL_Font.c_tLogFont.lfWeight;
  return S_OK;
}

//==============================================================================
STDMETHODIMP CVText::SetFontWeight(long  iWeight, long iLogID ){

  m_tGL_Font.c_tLogFont.lfWeight = iWeight;
  m_tGL_Font.CalcFontOutlines(g_hDC, m_iIsFilled );
  m_RequestUpdate(iLogID);
  return S_OK;
}

//==============================================================================
STDMETHODIMP CVText::GetFontUnderlineFlag(long * piUnderlineFlag){

  * piUnderlineFlag = m_tGL_Font.c_tLogFont.lfUnderline;
  return S_OK;
}

//==============================================================================
STDMETHODIMP CVText::SetFontUnderlineFlag(long iUnderlineFlag, long iLogID ){

  m_tGL_Font.c_tLogFont.lfUnderline = (BYTE)iUnderlineFlag;
  m_tGL_Font.CalcFontOutlines(g_hDC, m_iIsFilled );
  m_RequestUpdate(iLogID);
  return S_OK;
}

//==============================================================================
STDMETHODIMP CVText::GetFontItalicFlag(long * piItalicFlag){

  * piItalicFlag = m_tGL_Font.c_tLogFont.lfItalic;
  return S_OK;
}

//==============================================================================
STDMETHODIMP CVText::SetFontItalicFlag(long iItalicFlag, long iLogID ){

  m_tGL_Font.c_tLogFont.lfItalic = (BYTE)iItalicFlag;
  m_tGL_Font.CalcFontOutlines(g_hDC, m_iIsFilled );
  m_RequestUpdate(iLogID);
  return S_OK;
}

//==============================================================================
void CVText::Draw(){
  float fTextW, fTextH;
  float fScrnX, fScrnY;
  char * szText;
  int iTextLen;

  m_nClipped = 0;
  if(!m_IsVisible) return;

  szText = (char *) m_bscText;
  iTextLen = strlen(szText);
  // Text size is in some internal GL units
  // Text height is the height of char 'A'
  m_tGL_Font.CalcTextSize( szText, &fTextW, &fTextH );

  g_TransformCoordinatesF( m_dX, m_dY, &fScrnX, &fScrnY );
  m_nClipped += IS_OFF_WINDOW( fScrnX, fScrnY); // check the center only
  glTranslatef( fScrnX, fScrnY,(float)m_dZ ); // translate to XY position 

  // This scale will make char 'A' height = m_dScale
  glScalef((float)m_dScale[0]/fTextH, (float)m_dScale[1]/fTextH,1); 
  glRotatef((float)m_dAngle,0,0,1);           // rotate 
  // translate to the text's bottom left corner
  glTranslatef( -fTextW/2.0f, -fTextH/2.0f, 0 );
  glColor4f( m_fRGB[0], m_fRGB[1], m_fRGB[2], m_fAlpha); // color
  // draw the text using previously generated font outline
  // saved in call lists
	glListBase(m_tGL_Font.c_iDisplList0 );
  glCallLists (iTextLen, GL_UNSIGNED_BYTE, szText ); 	

}
