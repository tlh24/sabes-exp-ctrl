#include "ATL_Defs.h"            // ATL,COM and Windows definitions
#include "resource.h"            // Resource IDs for registry
#include "CP_Display.h"          // this file is generated by MIDL compiler
#include "VMouse.h"              // Uses ATL and IDs

#include "GL_Engine.h"
#include "Util\CP_printf.h"
#include "Util\VariantLib.h"


//==============================================================================
CVMouse::CVMouse(){
}

//==============================================================================
CVMouse::~CVMouse(){
}

//==============================================================================
STDMETHODIMP CVMouse::GetShowFlag(long * piShowFlag){
  * piShowFlag = g_iMouseShowFlag;

  return S_OK;
}


//==============================================================================
STDMETHODIMP CVMouse::SetShowFlag(long iShowFlag){
  if( iShowFlag ) return Show();
  return Hide();
}

//==============================================================================
STDMETHODIMP CVMouse::GetXY(VARIANT * pvMtx){
  int * piData;

  if( g_MakeVariantArray( 2, pvMtx, &piData ) ){
    return g_ErrorToHresult(1);
  }
  piData[0] = g_tMouseXY.x;
  piData[1] = g_tMouseXY.y;
  SafeArrayUnaccessData( pvMtx->parray );

  return S_OK;
}

//==============================================================================
STDMETHODIMP CVMouse::GetAllEvents(VARIANT * pvMtx){
  int * piData;
  int iSize;

  if( g_MakeVariantArray( 3, 3, pvMtx, &piData ) ){
    return g_ErrorToHresult(1);
  }
  iSize = sizeof(g_aiMouseEvents);
  memcpy( piData, g_aiMouseEvents, sizeof(g_aiMouseEvents));
  SafeArrayUnaccessData( pvMtx->parray );

  return S_OK;
}

//==============================================================================
STDMETHODIMP CVMouse::GetDownEvents(VARIANT * pvMtx){
  int * piData;

  if( g_MakeVariantArray( 3, pvMtx, &piData ) ){
    return g_ErrorToHresult(1);
  }
  piData[0] = g_aiMouseEvents[MOUSE_LEFT][MOUSE_DOWN];
  piData[1] = g_aiMouseEvents[MOUSE_MIDDLE][MOUSE_DOWN];  
  piData[2] = g_aiMouseEvents[MOUSE_RIGHT][MOUSE_DOWN];  
  SafeArrayUnaccessData( pvMtx->parray );

  return S_OK;
}

//==============================================================================
STDMETHODIMP CVMouse::GetUpEvents(VARIANT * pvMtx){
  int * piData;

  if( g_MakeVariantArray( 3, pvMtx, &piData ) ){
    return g_ErrorToHresult(1);
  }
  piData[0] = g_aiMouseEvents[MOUSE_LEFT][MOUSE_UP];
  piData[1] = g_aiMouseEvents[MOUSE_MIDDLE][MOUSE_UP];  
  piData[2] = g_aiMouseEvents[MOUSE_RIGHT][MOUSE_UP];  
  SafeArrayUnaccessData( pvMtx->parray );

  return S_OK;
}

//==============================================================================
STDMETHODIMP CVMouse::GetDblclickEvents(VARIANT * pvMtx){
  int * piData;

  if( g_MakeVariantArray( 3, pvMtx, &piData ) ){
    return g_ErrorToHresult(1);
  }
  piData[0] = g_aiMouseEvents[MOUSE_LEFT][MOUSE_DBLCLICK];
  piData[1] = g_aiMouseEvents[MOUSE_MIDDLE][MOUSE_DBLCLICK];  
  piData[2] = g_aiMouseEvents[MOUSE_RIGHT][MOUSE_DBLCLICK];
  SafeArrayUnaccessData( pvMtx->parray );

  return S_OK;
}

//==============================================================================
STDMETHODIMP CVMouse::ClearEvents(){
  int i,j;

  for(i=0;i<3;i++) {
    for(j=0;j<3;j++) g_aiMouseEvents[i][j]=0;
  }

  return S_OK;
}

//==============================================================================
STDMETHODIMP CVMouse::Show(){
  g_MouseCursorOn();
  return S_OK;
}

//==============================================================================
STDMETHODIMP CVMouse::Hide(){
  g_MouseCursorOff();
  return S_OK;
}

